# PostHog Helm Chart

> :warning: **This chart is not ready yet**: Be careful!

ðŸ¦” [PostHog](https://posthog.com/) is developer-friendly, open-source product analytics.

## Introduction

This chart bootstraps a [PostHog](https://posthog.com/) deployment on a [Kubernetes](http://kubernetes.io) cluster using the [Helm](https://helm.sh) package manager.

This installation is geared towards larger scalability (> 1M events per month).

It also optionally packages [Clickhouse](https://clickhouse.tech/), [PostgreSQL](https://github.com/kubernetes/charts/tree/master/stable/postgresql), [Redis](https://github.com/kubernetes/charts/tree/master/stable/redis) and [Apache Kafka](https://kafka.apache.org/) which are required for PostHog.

## TL;DR;

```console
helm repo add posthog https://posthog.github.io/charts-clickhouse/
helm repo update
helm install --timeout 20m posthog posthog/posthog
```

## Prerequisites

- Google Cloud kubernetes cluster
- Kubernetes 1.4+ with Beta APIs enabled
- helm >= v3
- PV provisioner support in the underlying infrastructure (with persistence storage enabled)

## Installing the Chart

To install the chart with the release name `posthog`:

```console
helm repo add posthog https://posthog.github.io/charts-clickhouse/
helm repo update
helm install --timeout 20m posthog posthog/posthog
```

The command deploys PostHog on the Kubernetes cluster in the default configuration. The [configuration](#configuration) section lists the parameters that can be configured during installation.

> **Tip**: List all releases using `helm list`

## Uninstalling the Chart

To uninstall/delete the `posthog` deployment:

```console
$ helm delete posthog
```

The command removes all the Kubernetes components associated with the chart and deletes the release.

> **Warning**: Jobs are not deleted automatically. They need to be manually deleted

```console
$ kubectl delete job/posthog-migrate
```

## Configuration

The following table lists the configurable parameters of the PostHog chart and their default values.

{{ template "chart.valuesSection" . }}

Dependent charts can also have values overwritten. Preface values with postgresql.*

Specify each parameter using the `--set key=value[,key=value]` argument to `helm install`. For example,

```console
$ helm install --timeout 20m \
  --set persistence.enabled=false,email.host=email \
  posthog .
```

Alternatively, a YAML file that specifies the values for the above parameters can be provided while installing the chart. For example,

```console
$ helm install --timeout 20m -f my-values.yaml posthog .
```

## PostgreSQL

By default, PostgreSQL is installed as part of the chart. To use an external PostgreSQL server set `postgresql.enabled` to `false` and then set `postgresql.postgresHost` and `postgresql.postgresqlPassword`. The other options (`postgresql.postgresqlDatabase`, `postgresql.postgresqlUsername` and `postgresql.postgresqlPort`) may also want changing from their default values.

To avoid issues when upgrading this chart, provide `postgresql.postgresqlPassword` for subsequent upgrades. This is due to an issue in the PostgreSQL chart where password will be overwritten with randomly generated passwords otherwise. See https://github.com/helm/charts/tree/master/stable/postgresql#upgrade for more detail.

## Redis

By default, Redis is installed as part of the chart. To use an external Redis server/cluster set `redis.enabled` to `false` and then set `redis.host`. If your redis cluster uses password define it with `redis.password`, otherwise just omit it. Check the table above for more configuration options.

To avoid issues when upgrading this chart, provide `redis.password` for subsequent upgrades. Otherwise the redis pods will get recreated on every update, potentially incurring some downtime.

## Ingress

This chart provides support for Ingress resource. If you have an available Ingress Controller such as Nginx or Traefik you maybe want to set `ingress.enabled` to true and choose an `ingress.hostname` for the URL. Then, you should be able to access the installation using that address.

## Prometheus

This chart supports alerting. Set `prometheus.enabled` to true and set `prometheus.alertmanagerFiles` to the right configuration.

Read more at https://github.com/prometheus-community/helm-charts/tree/main/charts/prometheus and https://prometheus.io/docs/alerting/latest/configuration/

### Example configuration (pagerduty)

```yaml
prometheus:
  enabled: true

  alertmanagerFiles:
    alertmanager.yml:
      receivers:
        - name: default-receiver
          pagerduty_configs:
            - routing_key: YOUR_ROUTING_KEY
              description: "{{"{{"}} range .Alerts }}{{"{{"}} .Annotations.summary }}\n{{"{{"}} end }}"

      route:
        group_by: [alertname]
        receiver: default-receiver
```

### Getting access to prometheus frontend

This might be useful when checking out metrics. Figure out your prometheus-server pod name via `kubectl get pods --namespace NS` and run:
`kubectl --namespace NS port-forward posthog-prometheus-server-XXX 9090`

After this you should be able to access prometheus server on localhost.
