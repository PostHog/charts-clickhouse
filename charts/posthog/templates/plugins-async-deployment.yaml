{{- if .Values.pluginsAsync.enabled -}}
# Keep this in sync with `plugins-deployment.yaml`
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "posthog.fullname" . }}-plugins-async
  labels: {{- include "_snippet-metadata-labels-common" . | nindent 4 }}
  annotations: {{- include "_snippet-metadata-annotations-common" . | nindent 4 }}
spec:
  selector:
    matchLabels:
        app: {{ template "posthog.fullname" . }}
        release: "{{ .Release.Name }}"
        role: plugins-async
  {{- if not .Values.pluginsAsync.hpa.enabled }}
  replicas: {{ .Values.pluginsAsync.replicacount }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/secrets.yaml: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
        {{- if .Values.pluginsAsync.podAnnotations }}
        {{- toYaml .Values.pluginsAsync.podAnnotations | nindent 8 }}
        {{- end }}
      labels:
        app: {{ template "posthog.fullname" . }}
        release: "{{ .Release.Name }}"
        role: plugins-async
        {{- if (eq (default .Values.image.tag "none") "latest") }}
        date: "{{ now | unixEpoch }}"
        {{- end }}
        {{- if .Values.pluginsAsync.podLabels }}
        {{- toYaml .Values.pluginsAsync.podLabels | nindent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "posthog.serviceAccountName" . }}
      {{- if .Values.pluginsAsync.affinity }}
      affinity:
        {{- toYaml .Values.pluginsAsync.affinity | nindent 8 }}
      {{- end }}
      {{- if .Values.pluginsAsync.nodeSelector }}
      nodeSelector:
        {{- toYaml .Values.pluginsAsync.nodeSelector | nindent 8 }}
      {{- end }}
      {{- if .Values.pluginsAsync.tolerations }}
      tolerations:
        {{- toYaml .Values.pluginsAsync.tolerations | nindent 8 }}
      {{- end }}
      {{- if .Values.pluginsAsync.schedulerName }}
      schedulerName: "{{ .Values.pluginsAsync.schedulerName }}"
      {{- end }}
      {{- if .Values.pluginsAsync.priorityClassName }}
      priorityClassName: "{{ .Values.pluginsAsync.priorityClassName }}"
      {{- end }}
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml .Values.image.imagePullSecrets | nindent 8 }}
      {{- end }}
      {{- if .Values.pluginsAsync.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.pluginsAsync.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}-plugins-async
        image: {{ template "posthog.image.fullPath" . }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
          - ./bin/plugin-server
          - --no-restart-loop
        ports:
        # Expose the port on which the healtchheck endpoint listens
        - containerPort: 6738
        env:
        - name: PLUGIN_SERVER_MODE
          value: "async"
        # Kafka env variables
        {{- include "snippet.kafka-env" . | nindent 8 }}

        # Object Storage env variables
        {{- include "snippet.objectstorage-env" . | nindent 8 }}

        # Redis env variables
        {{- include "snippet.redis-env" . | nindent 8 }}

        # statsd env variables
        {{- include "snippet.statsd-env" . | nindent 8 }}

        {{- include "snippet.posthog-env" . | indent 8 }}
        {{- include "snippet.postgresql-env" . | nindent 8 }}
        {{- include "snippet.clickhouse-env" . | nindent 8 }}
        {{- if .Values.env }}
        {{- toYaml .Values.env | nindent 8 }}
        {{- end }}
        {{- if .Values.pluginsAsync.env }}
        {{- toYaml .Values.pluginsAsync.env | nindent 8 }}
        {{- end }}
        livenessProbe:
          exec:
            command:
              #Â Just check that we can at least exec to the container
              - "true"
          failureThreshold: {{ .Values.pluginsAsync.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.pluginsAsync.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.pluginsAsync.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.pluginsAsync.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.pluginsAsync.livenessProbe.timeoutSeconds }}
        readinessProbe:
          failureThreshold: {{ .Values.pluginsAsync.readinessProbe.failureThreshold }}
          httpGet:
            path: /_health
            port: 6738
            scheme: HTTP
          initialDelaySeconds: {{ .Values.pluginsAsync.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.pluginsAsync.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.pluginsAsync.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.pluginsAsync.readinessProbe.timeoutSeconds }}
        resources:
          {{- toYaml .Values.pluginsAsync.resources | nindent 12 }}
        {{- if .Values.pluginsAsync.securityContext.enabled }}
        securityContext:
          {{- omit .Values.pluginsAsync.securityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
      initContainers:
      {{- include "_snippet-initContainers-wait-for-service-dependencies" . | indent 8 }}
      {{- include "_snippet-initContainers-wait-for-migrations" . | indent 8 }}
{{- end }}
