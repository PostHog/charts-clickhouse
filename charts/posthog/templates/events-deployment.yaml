{{- if .Values.events.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "posthog.fullname" . }}-events
  labels: {{- include "_snippet-metadata-labels-common" . | nindent 4 }}
  annotations: {{- include "_snippet-metadata-annotations-common" . | nindent 4 }}
spec:
  selector:
    matchLabels:
        app: {{ template "posthog.fullname" . }}
        release: "{{ .Release.Name }}"
        role: events
  {{- if not .Values.events.hpa.enabled }}
  replicas: {{ .Values.events.replicacount }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/secrets.yaml: {{ include (print $.Template.BasePath "/secrets.yaml") . | sha256sum }}
      {{- if .Values.web.podAnnotations }}
{{ toYaml .Values.web.podAnnotations | indent 8 }}
      {{- end }}
      labels:
        app: {{ template "posthog.fullname" . }}
        release: "{{ .Release.Name }}"
        role: events
        {{- if (eq (default .Values.image.tag "none") "latest") }}
        date: "{{ now | unixEpoch }}"
        {{- end }}
        {{- if .Values.web.podLabels }}
{{ toYaml .Values.web.podLabels | indent 8 }}
        {{- end }}
    spec:
      serviceAccountName: {{ template "posthog.serviceAccountName" . }}
      {{- if .Values.web.affinity }}
      affinity:
{{ toYaml .Values.web.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.web.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.web.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.web.tolerations }}
      tolerations:
{{ toYaml .Values.web.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.web.schedulerName }}
      schedulerName: "{{ .Values.web.schedulerName }}"
      {{- end }}
      {{- if .Values.image.imagePullSecrets }}
      imagePullSecrets:
{{ toYaml .Values.image.imagePullSecrets | indent 8 }}
      {{- end }}
     {{- if .Values.events.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.events.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}-events
        image: {{ template "posthog.image.fullPath" . }}
        command:
          - ./bin/docker-server
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - containerPort: {{ .Values.service.internalPort }}
        # Expose the poort on which Prometheus /metrics endpoint resides
        - containerPort: 8001
        env:
        # Kafka env variables
        {{- include "snippet.kafka-env" . | indent 8 }}

        # Object Storage env variables
        {{- include "snippet.objectstorage-env" . | indent 8 }}

        # Redis env variables
        {{- include "snippet.redis-env" . | indent 8 }}

        # statsd env variables
        {{- include "snippet.statsd-env" . | indent 8 }}

        - name: DISABLE_SECURE_SSL_REDIRECT
          value: '1'
        - name: IS_BEHIND_PROXY
          value: '1'
      {{- if eq .Values.web.secureCookies false }}
        - name: SECURE_COOKIES
          value: '0'
      {{- end }}
        # PostHog app settings
        {{- include "snippet.posthog-env" . | indent 8 }}
        {{- include "snippet.posthog-sentry-env" . | indent 8 }}
        - name: PRIMARY_DB
          value: clickhouse
        {{- include "snippet.postgresql-env" . | nindent 8 }}
        {{- include "snippet.clickhouse-env" . | nindent 8 }}
        {{- include "snippet.email-env" . | nindent 8 }}
{{- if .Values.env }}
{{ toYaml .Values.env | indent 8 }}
{{- end }}
{{- if .Values.web.env }}
{{ toYaml .Values.web.env | indent 8 }}
{{- end }}
        livenessProbe:
          httpGet:
            path: /_livez
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          failureThreshold: {{ .Values.web.livenessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.web.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.web.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.web.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.web.livenessProbe.timeoutSeconds }}
        readinessProbe:
          httpGet:
            # For readiness, we want to use the checks specific to the events
            # role, which may be a subset of all the apps dependencies
            path: /_readyz?role=events
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          failureThreshold: {{ .Values.web.readinessProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.web.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.web.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.web.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.web.readinessProbe.timeoutSeconds }}
        startupProbe:
          httpGet:
            # For startup, we want to make sure that everything is in place,
            # including postgres. This does however mean we would not be able to
            # deploy new releases when we have a postgres outage
            path: /_readyz
            port: {{ .Values.service.internalPort }}
            scheme: HTTP
          failureThreshold: {{ .Values.web.startupProbe.failureThreshold }}
          initialDelaySeconds: {{ .Values.web.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.web.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.web.startupProbe.successThreshold }}
          timeoutSeconds: {{ .Values.web.startupProbe.timeoutSeconds }}
        resources:
        {{ if not .Values.events.resources }}
{{ toYaml .Values.web.resources | indent 12 }}
        {{ else }}
{{ toYaml .Values.events.resources | indent 12 }}
        {{ end }}
        {{- if .Values.events.securityContext.enabled }}
        securityContext: {{- omit .Values.events.securityContext "enabled" | toYaml | nindent 12 }}
        {{- end }}
      initContainers:
      {{- include "_snippet-initContainers-wait-for-service-dependencies" . | indent 8 }}
      {{- include "_snippet-initContainers-wait-for-migrations" . | indent 8 }}
{{- end }}
