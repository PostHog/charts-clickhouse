suite: Kafka settings propagated to pods
templates:
  # This list may be too broad or too narrow, I've just added to all deployments
  # that use the django backend.
  - templates/web-deployment.yaml
  - templates/worker-deployment.yaml
  - templates/events-deployment.yaml
  - templates/migrate.job.yaml
  # NOTE: we need to include this as it is required by the other templates
  - templates/secrets.yaml

tests:
  - it: should use internal Kafka without TLS as default
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: RELEASE-NAME-posthog-kafka:9092
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_SECURITY_PROTOCOL
            value: SSL

  - it: should use internal Kafka when `kafka.enabled` is set to `true` and `externalKafka.brokers` is configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: true
      externalKafka:
        brokers:
          - "broker1:port1"
          - "broker2:port2"
        tls: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: RELEASE-NAME-posthog-kafka:9092
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_SECURITY_PROTOCOL
            value: SSL

  - it: should use external Kafka when `kafka.enabled` is set to `false` and `externalKafka.brokers` is configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        brokers:
          - broker1:port1
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: "broker1:port1"
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_SECURITY_PROTOCOL
            value: SSL

  - it: should use external Kafka when `kafka.enabled` is set to `false` and `externalKafka.brokers` is configured (multiple brokers)
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        brokers:
          - broker1:port1
          - broker2:port2
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: "broker1:port1,broker2:port2"
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_SECURITY_PROTOCOL
            value: SSL

  - it: should use TLS `kafka.enabled` is set to `false` and `externalKafka.tls` is set
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        brokers:
          - broker1:port1
        tls: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: "broker1:port1"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_SECURITY_PROTOCOL
            value: SSL

  - it: should allow both externalKafka and externalSessionRecordingKafka to be configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalKafka:
        brokers:
          - broker1:port1, broker2:port1
        tls: true
      externalSessionRecordingKafka:
        brokers:
          - broker2:port2, broker3:port3
        tls: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_HOSTS
            value: "broker1:port1, broker2:port1"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: SESSION_RECORDING_KAFKA_HOSTS
            value: "broker2:port2, broker3:port3"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: KAFKA_SECURITY_PROTOCOL
            value: SSL
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: SESSION_RECORDING_KAFKA_SECURITY_PROTOCOL
            value: SSL

  - it: should allow no TLS on externalSessionRecordingKafka
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      kafka:
        enabled: false
      externalSessionRecordingKafka:
        brokers:
          - broker2:port2, broker3:port3
        tls: false
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: SESSION_RECORDING_KAFKA_SECURITY_PROTOCOL
            value: SSL
