suite: Object storage settings propagated to pods
templates:
  # This list may be too broad or too narrow, I've just added to all deployments
  # that use the django backend.
  - templates/web-deployment.yaml
  - templates/worker-deployment.yaml
  - templates/events-deployment.yaml
  - templates/plugins-deployment.yaml
  - templates/migrate.job.yaml
  # NOTE: we need to include this as it is required by the other templates
  - templates/secrets.yaml

tests:
  - it: should not contain any object storage related settings with the default chart settings
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
    asserts:
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ENDPOINT
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_BUCKET
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ACCESS_KEY_ID
      - notContains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_SECRET_ACCESS_KEY


  - it: should use the correct variables when `minio.enabled` is `true`
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      minio.enabled: true
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ENDPOINT
            value: RELEASE-NAME-posthog-minio:19000
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_BUCKET
            value: posthog
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ACCESS_KEY_ID
            value: root-user
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_SECRET_ACCESS_KEY
            value: root-password-change-me-please


  - it: should use the correct variables when `minio.enabled` is `true` and `minio.auth.existingSecret` is used
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      minio.enabled: true
      minio.auth.existingSecret: secret_name
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ENDPOINT
            value: RELEASE-NAME-posthog-minio:19000
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_BUCKET
            value: posthog
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: secret_name
                key: root-user
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: secret_name
                key: root-password

  - it: should use the correct variables when `externalObjectStorage.host` is configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      externalObjectStorage:
        host: host_name
        port: "12345"
        bucket: bucket_name
        existingSecret: existing_secret
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ENDPOINT
            value: host_name:12345
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_BUCKET
            value: bucket_name
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: existing_secret
                key: root-user
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: existing_secret
                key: root-password

  - it: should use the correct variables when `externalObjectStorage.endpoint` is configured
    templates: # TODO: remove once secrets.yaml will be fixed/removed
      - templates/web-deployment.yaml
      - templates/worker-deployment.yaml
      - templates/events-deployment.yaml
      - templates/plugins-deployment.yaml
      - templates/migrate.job.yaml
    set:
      cloud: local
      externalObjectStorage:
        endpoint: host_name:12345
        bucket: bucket_name
        existingSecret: existing_secret
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ENDPOINT
            value: host_name:12345
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_BUCKET
            value: bucket_name
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: existing_secret
                key: root-user
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: OBJECT_STORAGE_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: existing_secret
                key: root-password
